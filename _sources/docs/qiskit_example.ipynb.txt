{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Run Qiskit circuits in DQPU"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this notebook we show how to use DQPU to simulate a quantum circuit created using the qiskit library."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Prerequisites\n",
    "\n",
    "You need a NEAR wallet account created by near-cli (https://docs.near.org/tools/near-cli) using this command:\n",
    "\n",
    "```bash\n",
    "near create-account ACCOUNT_NAME.testnet --useFaucet\n",
    "```\n",
    "\n",
    "You also need a running IPFS daemon, in order to submit and retrieve quantum programs and results from the system: https://docs.ipfs.tech/install/command-line/#install-official-binary-distributions\n",
    "\n",
    "\n",
    "```bash\n",
    "ipfs daemon\n",
    "```\n",
    "\n",
    "After that, install dqpu and qiskit:\n",
    "\n",
    "```bash\n",
    "pip install qiskit dqpu pylatexenc\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Qiskit demo\n",
    "\n",
    "First, we import needed libraries, included the dqpu qiskit backend `DQPUBackend`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit import QuantumCircuit, transpile\n",
    "from dqpu.backends.qiskit import DQPUBackend"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we create a normal `QuantumCircuit` as we always do in qiskit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 287.294x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = QuantumCircuit(2, 2)\n",
    "qc.h(0)\n",
    "qc.cx(0, 1)\n",
    "qc.draw(\"mpl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And now we instantiate the `DQPUBackend`; we also need to call `load_account` in order to load a NEAR wallet account (put here your NEAR account name)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "asyncio.run() cannot be called from a running event loop\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/dakk/.pyenv/versions/3.10.13/envs/dqpu2/lib/python3.10/site-packages/dqpu-0.2.7-py3.10.egg/dqpu/blockchain/near.py:67: RuntimeWarning: coroutine 'NearBlockchain.load_account.<locals>.v' was never awaited\n",
      "  return loop.run_until_complete(v())\n",
      "RuntimeWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    }
   ],
   "source": [
    "backend = DQPUBackend()\n",
    "backend.load_account(\"dqpu_alice.testnet\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we transpile the circuit and we call the `run` method: this will send the quantum circuit along with a reward to the smart contract on the NEAR blockchain. Someone will simulate it for us, and a verifier will check for the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "circ = transpile(qc, backend)\n",
    "job = backend.run(circ, shots=1024)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calling `job.status()` we wait until the job turns into `EXECUTED` status."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "JobStatus.RUNNING\n"
     ]
    }
   ],
   "source": [
    "print(job.status())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And finally we get the result from the smart contract and we plot it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "counts = job.result().get_counts(circ)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x500 with 1 Axes>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qiskit.visualization import plot_histogram\n",
    "\n",
    "plot_histogram(counts)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "dqpu-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
